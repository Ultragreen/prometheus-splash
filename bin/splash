#!/usr/bin/env ruby

require 'prometheus/client'
require 'prometheus/client/push'
require 'thor'
require 'yaml'

require 'splash/helpers'
require 'splash/command'
require 'splash/logs'
require 'splash/controller'

module CLISplash


  class Commands < Thor

    option :ack, :type => :boolean
    desc "wrap NAME", "wrapping for command or ack result"
    def wrap(name)
      command =  CommandWrapper::new(name)
      command.ack if options[:ack]
      command.call_and_notify
    end
  end


  class DaemonController < Thor
    option :foreground, :type => :boolean
    desc "start", "Starting Logs Monitor Daemon"
    def start
      Splash::LogsMonitor::DaemonController.startdaemon
    end
  end



  class Logs < Thor

    attr_accessor :config_file

    def initialize(*args)
      super
      @config_file = "./splash.yml"
    end

    option :config
    desc "analyse", "analyze logs in config"
    def analyse
      @config_file = options[:config] if options[:config]
      result = LogScanner::new(@config_file)
      result.analyse
      p result.output
    end

    option :config
    desc "monitor", "monitor logs in config"
    def monitor
      @config_file = options[:config] if options[:config]
      result = LogScanner::new(@config_file)
      result.analyse
      result.notify
    end

  end
end

class CLI < Thor
  include CLISplash
  desc "commands SUBCOMMAND ...ARGS", "Managing commands/batchs supervision"
  subcommand "commands", Commands
  desc "logs SUBCOMMAND ...ARGS", "Managing Files/Logs supervision"
  subcommand "logs", Logs
  desc "daemon SUBCOMMAND ...ARGS", "Logs monitor daemon contoller"
  subcommand "daemon", DaemonController
end








CLI.start(ARGV)
